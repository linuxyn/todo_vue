{"ast":null,"code":"// 该文件专门用于创建整个应用的路由器\nimport VueRouter from 'vue-router';\n// 引入组件\nimport About from '../pages/About';\nimport Home from '../pages/Home';\nimport News from '../pages/News';\nimport Message from '../pages/Message';\nimport Detail from '../pages/Detail';\n\n// 创建并暴露一个路由器\nconst router = new VueRouter({\n  routes: [{\n    name: 'aboutRouterName',\n    path: '/about',\n    component: About\n  }, {\n    path: '/home',\n    component: Home,\n    children: [{\n      name: 'xinwen',\n      path: 'news',\n      component: News\n    }, {\n      name: 'xiaoxi',\n      path: 'message',\n      component: Message,\n      children: [{\n        name: 'detailRouterName',\n        path: 'detail',\n        component: Detail,\n        // props的第一种写法，值为对象,该对象中所有的key-value都会以props的形式传递给Detail组件\n        // props:{a:1,b:'hello'}\n\n        // props的第二种写法，值为bool值。若bool值为真，就会把该路由组件收到params参数，以props的形式传递给Detail组件\n        // props: true\n\n        // props的第三种写法，值为函数\n        props($route) {\n          return {\n            id: $route.query.id,\n            title: $route.query.title\n          };\n        }\n        // 结构赋值\n        // props({query}){\n        //   return {id:query.id,title:query.title}\n        // },\n        // 结构赋值的连续写法\n        // props({query:{id,title}}){\n        //   return {id,title}\n        // }\n      }]\n    }]\n  }]\n});\n\n// 全局前置路由守卫--初始化和路由切换之前进行调用\nrouter.beforeEach((to, from, next) => {\n  console.log(\"to\", to);\n  console.log(\"from\", from);\n  if (to.path == '/home/news' || to.path == '/home/message') {}\n  if (to.name == 'xiaoxi' || to.name == 'xinwen') {\n    if (localStorage.getItem('school') == 'atguigu2') {\n      next();\n    } else {\n      alert('学校名不对，您无权访问');\n    }\n  } else {\n    next();\n  }\n});\nexport default router;","map":{"version":3,"names":["VueRouter","About","Home","News","Message","Detail","router","routes","name","path","component","children","props","$route","id","query","title","beforeEach","to","from","next","console","log","localStorage","getItem","alert"],"sources":["/Users/linuxyn/todos_vue/src/router/index.js"],"sourcesContent":["// 该文件专门用于创建整个应用的路由器\nimport VueRouter from 'vue-router'\n// 引入组件\nimport About from '../pages/About'\nimport Home from '../pages/Home'\n\nimport News from '../pages/News'\nimport Message from '../pages/Message'\nimport Detail from '../pages/Detail'\n\n// 创建并暴露一个路由器\nconst router = new VueRouter({\n  routes: [\n    { \n      name:'aboutRouterName',\n      path:'/about',\n      component:About,\n    },\n    {\n      path:'/home',\n      component:Home,\n      children: [\n        {\n          name:'xinwen',\n          path:'news',\n          component:News\n        },\n        {\n          name:'xiaoxi',\n          path:'message',\n          component:Message,\n          children:[\n            {\n              name:'detailRouterName',\n              path:'detail',\n              component:Detail,\n              // props的第一种写法，值为对象,该对象中所有的key-value都会以props的形式传递给Detail组件\n              // props:{a:1,b:'hello'}\n\n              // props的第二种写法，值为bool值。若bool值为真，就会把该路由组件收到params参数，以props的形式传递给Detail组件\n              // props: true\n\n              // props的第三种写法，值为函数\n              props($route){\n                return {\n                  id:$route.query.id,\n                  title:$route.query.title}\n              }\n              // 结构赋值\n              // props({query}){\n              //   return {id:query.id,title:query.title}\n              // },\n              // 结构赋值的连续写法\n              // props({query:{id,title}}){\n              //   return {id,title}\n              // }\n            }\n          ]\n        }\n      ]\n    }\n  ]\n})\n\n// 全局前置路由守卫--初始化和路由切换之前进行调用\nrouter.beforeEach((to,from,next)=>{\n  console.log(\"to\", to)\n  console.log(\"from\", from)\n  \n  if(to.path == '/home/news' || to.path == '/home/message' ){}\n  if( to.name =='xiaoxi' || to.name == 'xinwen'){\n    if(localStorage.getItem('school') == 'atguigu2'){\n      next()\n    } else {\n      alert('学校名不对，您无权访问')\n    }\n  } else {\n    next()\n  }\n})\n\nexport default router"],"mappings":"AAAA;AACA,OAAOA,SAAS,MAAM,YAAY;AAClC;AACA,OAAOC,KAAK,MAAM,gBAAgB;AAClC,OAAOC,IAAI,MAAM,eAAe;AAEhC,OAAOC,IAAI,MAAM,eAAe;AAChC,OAAOC,OAAO,MAAM,kBAAkB;AACtC,OAAOC,MAAM,MAAM,iBAAiB;;AAEpC;AACA,MAAMC,MAAM,GAAG,IAAIN,SAAS,CAAC;EAC3BO,MAAM,EAAE,CACN;IACEC,IAAI,EAAC,iBAAiB;IACtBC,IAAI,EAAC,QAAQ;IACbC,SAAS,EAACT;EACZ,CAAC,EACD;IACEQ,IAAI,EAAC,OAAO;IACZC,SAAS,EAACR,IAAI;IACdS,QAAQ,EAAE,CACR;MACEH,IAAI,EAAC,QAAQ;MACbC,IAAI,EAAC,MAAM;MACXC,SAAS,EAACP;IACZ,CAAC,EACD;MACEK,IAAI,EAAC,QAAQ;MACbC,IAAI,EAAC,SAAS;MACdC,SAAS,EAACN,OAAO;MACjBO,QAAQ,EAAC,CACP;QACEH,IAAI,EAAC,kBAAkB;QACvBC,IAAI,EAAC,QAAQ;QACbC,SAAS,EAACL,MAAM;QAChB;QACA;;QAEA;QACA;;QAEA;QACAO,KAAK,CAACC,MAAM,EAAC;UACX,OAAO;YACLC,EAAE,EAACD,MAAM,CAACE,KAAK,CAACD,EAAE;YAClBE,KAAK,EAACH,MAAM,CAACE,KAAK,CAACC;UAAK,CAAC;QAC7B;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACF,CAAC;IAEL,CAAC;EAEL,CAAC;AAEL,CAAC,CAAC;;AAEF;AACAV,MAAM,CAACW,UAAU,CAAC,CAACC,EAAE,EAACC,IAAI,EAACC,IAAI,KAAG;EAChCC,OAAO,CAACC,GAAG,CAAC,IAAI,EAAEJ,EAAE,CAAC;EACrBG,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEH,IAAI,CAAC;EAEzB,IAAGD,EAAE,CAACT,IAAI,IAAI,YAAY,IAAIS,EAAE,CAACT,IAAI,IAAI,eAAe,EAAE,CAAC;EAC3D,IAAIS,EAAE,CAACV,IAAI,IAAG,QAAQ,IAAIU,EAAE,CAACV,IAAI,IAAI,QAAQ,EAAC;IAC5C,IAAGe,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,IAAI,UAAU,EAAC;MAC9CJ,IAAI,EAAE;IACR,CAAC,MAAM;MACLK,KAAK,CAAC,aAAa,CAAC;IACtB;EACF,CAAC,MAAM;IACLL,IAAI,EAAE;EACR;AACF,CAAC,CAAC;AAEF,eAAed,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}