{"ast":null,"code":"// 该文件专门用于创建整个应用的路由器\nimport VueRouter from 'vue-router';\n// 引入组件\nimport About from '../pages/About';\nimport Home from '../pages/Home';\nimport News from '../pages/News';\nimport Message from '../pages/Message';\nimport Detail from '../pages/Detail';\n\n// 创建并暴露一个路由器\nconst router = new VueRouter({\n  routes: [{\n    name: 'aboutRouterName',\n    path: '/about',\n    component: About,\n    meta: {\n      title: '关于'\n    }\n  }, {\n    path: '/home',\n    component: Home,\n    meta: {\n      title: '主页'\n    },\n    children: [{\n      name: 'xinwen',\n      path: 'news',\n      component: News,\n      meta: {\n        isAuth: true,\n        title: '新闻'\n      },\n      beforeEnter: (to, from) => {\n        console.log('');\n        if (to.meta.isAuth) {\n          if (localStorage.getItem('school') == 'atguigu') {\n            next();\n          } else {\n            alert('学校名不对，您无权访问');\n          }\n        } else {\n          next();\n        }\n      }\n    }, {\n      name: 'xiaoxi',\n      path: 'message',\n      component: Message,\n      meta: {\n        isAuth: true,\n        title: '消息'\n      },\n      children: [{\n        name: 'detailRouterName',\n        path: 'detail',\n        component: Detail,\n        meta: {\n          title: '详情'\n        },\n        // props的第一种写法，值为对象,该对象中所有的key-value都会以props的形式传递给Detail组件\n        // props:{a:1,b:'hello'}\n\n        // props的第二种写法，值为bool值。若bool值为真，就会把该路由组件收到params参数，以props的形式传递给Detail组件\n        // props: true\n\n        // props的第三种写法，值为函数\n        props($route) {\n          return {\n            id: $route.query.id,\n            title: $route.query.title\n          };\n        }\n        // 结构赋值\n        // props({query}){\n        //   return {id:query.id,title:query.title}\n        // },\n        // 结构赋值的连续写法\n        // props({query:{id,title}}){\n        //   return {id,title}\n        // }\n      }]\n    }]\n  }]\n});\n\n// 全局前置路由守卫: 初始化时执行、每次路由切换之前执行\n// router.beforeEach((to,from,next)=>{\n//   console.log(\"前置路由\", from,to)\n//   // if(to.path == '/home/news' || to.path == '/home/message' ){\n//   // if( to.name =='xiaoxi' || to.name == 'xinwen'){\n//   if(to.meta.isAuth){\n//     if(localStorage.getItem('school') == 'atguigu'){\n//       next()\n//     } else {\n//       alert('学校名不对，您无权访问')\n//     }\n//   } else {\n//     next()\n//   }\n// })\n\n// 全局后置路由守卫: 初始化时执行、每次路由切换后执行\nrouter.afterEach((to, from) => {\n  console.log('后置路由守卫', to, from);\n  if (to.meta.title) {\n    document.title = to.meta.title; // 修改网页的title\n  } else {\n    document.title = 'vue默认title';\n  }\n});\nexport default router;","map":{"version":3,"names":["VueRouter","About","Home","News","Message","Detail","router","routes","name","path","component","meta","title","children","isAuth","beforeEnter","to","from","console","log","localStorage","getItem","next","alert","props","$route","id","query","afterEach","document"],"sources":["/Users/linuxyn/todos_vue/src/router/index.js"],"sourcesContent":["// 该文件专门用于创建整个应用的路由器\nimport VueRouter from 'vue-router'\n// 引入组件\nimport About from '../pages/About'\nimport Home from '../pages/Home'\n\nimport News from '../pages/News'\nimport Message from '../pages/Message'\nimport Detail from '../pages/Detail'\n\n// 创建并暴露一个路由器\nconst router = new VueRouter({\n  routes: [\n    { \n      name:'aboutRouterName',\n      path:'/about',\n      component:About,\n      meta:{title:'关于'}\n    },\n    {\n      path:'/home',\n      component:Home,\n      meta:{title:'主页'},\n      children: [\n        {\n          name:'xinwen',\n          path:'news',\n          component:News,\n          meta:{isAuth:true,title:'新闻'},\n          beforeEnter: (to, from) => {\n            console.log('')\n            if(to.meta.isAuth){\n              if(localStorage.getItem('school') == 'atguigu'){\n                next()\n              } else {\n                alert('学校名不对，您无权访问')\n              }\n            } else {\n              next()\n            }\n          }\n        },\n        {\n          name:'xiaoxi',\n          path:'message',\n          component:Message,\n          meta:{isAuth:true,title:'消息'},\n          children:[\n            {\n              name:'detailRouterName',\n              path:'detail',\n              component:Detail,\n              meta:{title:'详情'},\n              // props的第一种写法，值为对象,该对象中所有的key-value都会以props的形式传递给Detail组件\n              // props:{a:1,b:'hello'}\n\n              // props的第二种写法，值为bool值。若bool值为真，就会把该路由组件收到params参数，以props的形式传递给Detail组件\n              // props: true\n\n              // props的第三种写法，值为函数\n              props($route){\n                return {\n                  id:$route.query.id,\n                  title:$route.query.title}\n              }\n              // 结构赋值\n              // props({query}){\n              //   return {id:query.id,title:query.title}\n              // },\n              // 结构赋值的连续写法\n              // props({query:{id,title}}){\n              //   return {id,title}\n              // }\n            }\n          ]\n        }\n      ]\n    }\n  ]\n})\n\n// 全局前置路由守卫: 初始化时执行、每次路由切换之前执行\n// router.beforeEach((to,from,next)=>{\n//   console.log(\"前置路由\", from,to)\n//   // if(to.path == '/home/news' || to.path == '/home/message' ){\n//   // if( to.name =='xiaoxi' || to.name == 'xinwen'){\n//   if(to.meta.isAuth){\n//     if(localStorage.getItem('school') == 'atguigu'){\n//       next()\n//     } else {\n//       alert('学校名不对，您无权访问')\n//     }\n//   } else {\n//     next()\n//   }\n// })\n\n// 全局后置路由守卫: 初始化时执行、每次路由切换后执行\nrouter.afterEach((to,from)=>{\n  console.log('后置路由守卫',to,from)\n  if(to.meta.title){\n    document.title = to.meta.title // 修改网页的title\n  }else{\n    document.title ='vue默认title'\n  }\n})\n\nexport default router"],"mappings":"AAAA;AACA,OAAOA,SAAS,MAAM,YAAY;AAClC;AACA,OAAOC,KAAK,MAAM,gBAAgB;AAClC,OAAOC,IAAI,MAAM,eAAe;AAEhC,OAAOC,IAAI,MAAM,eAAe;AAChC,OAAOC,OAAO,MAAM,kBAAkB;AACtC,OAAOC,MAAM,MAAM,iBAAiB;;AAEpC;AACA,MAAMC,MAAM,GAAG,IAAIN,SAAS,CAAC;EAC3BO,MAAM,EAAE,CACN;IACEC,IAAI,EAAC,iBAAiB;IACtBC,IAAI,EAAC,QAAQ;IACbC,SAAS,EAACT,KAAK;IACfU,IAAI,EAAC;MAACC,KAAK,EAAC;IAAI;EAClB,CAAC,EACD;IACEH,IAAI,EAAC,OAAO;IACZC,SAAS,EAACR,IAAI;IACdS,IAAI,EAAC;MAACC,KAAK,EAAC;IAAI,CAAC;IACjBC,QAAQ,EAAE,CACR;MACEL,IAAI,EAAC,QAAQ;MACbC,IAAI,EAAC,MAAM;MACXC,SAAS,EAACP,IAAI;MACdQ,IAAI,EAAC;QAACG,MAAM,EAAC,IAAI;QAACF,KAAK,EAAC;MAAI,CAAC;MAC7BG,WAAW,EAAE,CAACC,EAAE,EAAEC,IAAI,KAAK;QACzBC,OAAO,CAACC,GAAG,CAAC,EAAE,CAAC;QACf,IAAGH,EAAE,CAACL,IAAI,CAACG,MAAM,EAAC;UAChB,IAAGM,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,IAAI,SAAS,EAAC;YAC7CC,IAAI,EAAE;UACR,CAAC,MAAM;YACLC,KAAK,CAAC,aAAa,CAAC;UACtB;QACF,CAAC,MAAM;UACLD,IAAI,EAAE;QACR;MACF;IACF,CAAC,EACD;MACEd,IAAI,EAAC,QAAQ;MACbC,IAAI,EAAC,SAAS;MACdC,SAAS,EAACN,OAAO;MACjBO,IAAI,EAAC;QAACG,MAAM,EAAC,IAAI;QAACF,KAAK,EAAC;MAAI,CAAC;MAC7BC,QAAQ,EAAC,CACP;QACEL,IAAI,EAAC,kBAAkB;QACvBC,IAAI,EAAC,QAAQ;QACbC,SAAS,EAACL,MAAM;QAChBM,IAAI,EAAC;UAACC,KAAK,EAAC;QAAI,CAAC;QACjB;QACA;;QAEA;QACA;;QAEA;QACAY,KAAK,CAACC,MAAM,EAAC;UACX,OAAO;YACLC,EAAE,EAACD,MAAM,CAACE,KAAK,CAACD,EAAE;YAClBd,KAAK,EAACa,MAAM,CAACE,KAAK,CAACf;UAAK,CAAC;QAC7B;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACF,CAAC;IAEL,CAAC;EAEL,CAAC;AAEL,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACAN,MAAM,CAACsB,SAAS,CAAC,CAACZ,EAAE,EAACC,IAAI,KAAG;EAC1BC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAACH,EAAE,EAACC,IAAI,CAAC;EAC7B,IAAGD,EAAE,CAACL,IAAI,CAACC,KAAK,EAAC;IACfiB,QAAQ,CAACjB,KAAK,GAAGI,EAAE,CAACL,IAAI,CAACC,KAAK,EAAC;EACjC,CAAC,MAAI;IACHiB,QAAQ,CAACjB,KAAK,GAAE,YAAY;EAC9B;AACF,CAAC,CAAC;AAEF,eAAeN,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}