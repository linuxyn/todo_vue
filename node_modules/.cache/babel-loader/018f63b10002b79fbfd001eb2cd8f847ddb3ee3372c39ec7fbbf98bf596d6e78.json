{"ast":null,"code":"// 该文件专门用于创建整个应用的路由器\nimport VueRouter from 'vue-router';\n// 引入组件\nimport About from '../pages/About';\nimport Home from '../pages/Home';\nimport News from '../pages/News';\nimport Message from '../pages/Message';\nimport Detail from '../pages/Detail';\n\n// 创建并暴露一个路由器\nconst router = new VueRouter({\n  // mode:'history',\n  mode: 'histor',\n  routes: [{\n    name: 'aboutRouterName',\n    path: '/about',\n    component: About,\n    meta: {\n      title: '关于',\n      isAuth: true\n    }\n  }, {\n    path: '/home',\n    component: Home,\n    meta: {\n      title: '主页'\n    },\n    children: [{\n      name: 'xinwen',\n      path: 'news',\n      component: News,\n      meta: {\n        isAuth: true,\n        title: '新闻'\n      }\n      // beforeEnter: (to,from,next) => {\n      //   console.log('独享路由:', to,from,next)\n      //   if(to.meta.isAuth){\n      //     if(localStorage.getItem('school') == 'atguigu'){\n      //       next()\n      //     } else {\n      //       alert('学校名不对，您无权访问')\n      //     }\n      //   } else {\n      //     next()\n      //   }\n      // }\n    }, {\n      name: 'xiaoxi',\n      path: 'message',\n      component: Message,\n      meta: {\n        isAuth: true,\n        title: '消息'\n      },\n      children: [{\n        name: 'detailRouterName',\n        path: 'detail',\n        component: Detail,\n        meta: {\n          title: '详情'\n        },\n        // props的第一种写法，值为对象,该对象中所有的key-value都会以props的形式传递给Detail组件\n        // props:{a:1,b:'hello'}\n\n        // props的第二种写法，值为bool值。若bool值为真，就会把该路由组件收到params参数，以props的形式传递给Detail组件\n        // props: true\n\n        // props的第三种写法，值为函数\n        props($route) {\n          return {\n            id: $route.query.id,\n            title: $route.query.title\n          };\n        }\n        // 结构赋值\n        // props({query}){\n        //   return {id:query.id,title:query.title}\n        // },\n        // 结构赋值的连续写法\n        // props({query:{id,title}}){\n        //   return {id,title}\n        // }\n      }]\n    }]\n  }]\n});\n\n// 全局前置路由守卫: 初始化时执行、每次路由切换之前执行\n// router.beforeEach((to,from,next)=>{\n//   console.log(\"前置路由\", from,to)\n//   // if(to.path == '/home/news' || to.path == '/home/message' ){\n//   // if( to.name =='xiaoxi' || to.name == 'xinwen'){\n//   if(to.meta.isAuth){\n//     if(localStorage.getItem('school') == 'atguigu'){\n//       next()\n//     } else {\n//       alert('学校名不对，您无权访问')\n//     }\n//   } else {\n//     next()\n//   }\n// })\n\n// 全局后置路由守卫: 初始化时执行、每次路由切换后执行\n// router.afterEach((to,from)=>{\n// console.log('后置路由守卫',to,from)\n// if(to.meta.title){\n//   document.title = to.meta.title // 修改网页的title\n// }else{\n//   document.title ='vue默认title'\n// }\n// document.title = to.meta.title || '硅谷系统'\n// })\n\nexport default router;","map":{"version":3,"names":["VueRouter","About","Home","News","Message","Detail","router","mode","routes","name","path","component","meta","title","isAuth","children","props","$route","id","query"],"sources":["/Users/linuxyn/todos_vue/src/router/index.js"],"sourcesContent":["// 该文件专门用于创建整个应用的路由器\nimport VueRouter from 'vue-router'\n// 引入组件\nimport About from '../pages/About'\nimport Home from '../pages/Home'\n\nimport News from '../pages/News'\nimport Message from '../pages/Message'\nimport Detail from '../pages/Detail'\n\n// 创建并暴露一个路由器\nconst router = new VueRouter({\n  // mode:'history',\n  mode:'histor',\n  routes: [\n    { \n      name:'aboutRouterName',\n      path:'/about',\n      component:About,\n      meta:{title:'关于',isAuth:true}\n    },\n    {\n      path:'/home',\n      component:Home,\n      meta:{title:'主页'},\n      children: [\n        {\n          name:'xinwen',\n          path:'news',\n          component:News,\n          meta:{isAuth:true,title:'新闻'},\n          // beforeEnter: (to,from,next) => {\n          //   console.log('独享路由:', to,from,next)\n          //   if(to.meta.isAuth){\n          //     if(localStorage.getItem('school') == 'atguigu'){\n          //       next()\n          //     } else {\n          //       alert('学校名不对，您无权访问')\n          //     }\n          //   } else {\n          //     next()\n          //   }\n          // }\n        },\n        {\n          name:'xiaoxi',\n          path:'message',\n          component:Message,\n          meta:{isAuth:true,title:'消息'},\n          children:[\n            {\n              name:'detailRouterName',\n              path:'detail',\n              component:Detail,\n              meta:{title:'详情'},\n              // props的第一种写法，值为对象,该对象中所有的key-value都会以props的形式传递给Detail组件\n              // props:{a:1,b:'hello'}\n\n              // props的第二种写法，值为bool值。若bool值为真，就会把该路由组件收到params参数，以props的形式传递给Detail组件\n              // props: true\n\n              // props的第三种写法，值为函数\n              props($route){\n                return {\n                  id:$route.query.id,\n                  title:$route.query.title}\n              }\n              // 结构赋值\n              // props({query}){\n              //   return {id:query.id,title:query.title}\n              // },\n              // 结构赋值的连续写法\n              // props({query:{id,title}}){\n              //   return {id,title}\n              // }\n            }\n          ]\n        }\n      ]\n    }\n  ]\n})\n\n// 全局前置路由守卫: 初始化时执行、每次路由切换之前执行\n// router.beforeEach((to,from,next)=>{\n//   console.log(\"前置路由\", from,to)\n//   // if(to.path == '/home/news' || to.path == '/home/message' ){\n//   // if( to.name =='xiaoxi' || to.name == 'xinwen'){\n//   if(to.meta.isAuth){\n//     if(localStorage.getItem('school') == 'atguigu'){\n//       next()\n//     } else {\n//       alert('学校名不对，您无权访问')\n//     }\n//   } else {\n//     next()\n//   }\n// })\n\n// 全局后置路由守卫: 初始化时执行、每次路由切换后执行\n// router.afterEach((to,from)=>{\n  // console.log('后置路由守卫',to,from)\n  // if(to.meta.title){\n  //   document.title = to.meta.title // 修改网页的title\n  // }else{\n  //   document.title ='vue默认title'\n  // }\n  // document.title = to.meta.title || '硅谷系统'\n// })\n\nexport default router"],"mappings":"AAAA;AACA,OAAOA,SAAS,MAAM,YAAY;AAClC;AACA,OAAOC,KAAK,MAAM,gBAAgB;AAClC,OAAOC,IAAI,MAAM,eAAe;AAEhC,OAAOC,IAAI,MAAM,eAAe;AAChC,OAAOC,OAAO,MAAM,kBAAkB;AACtC,OAAOC,MAAM,MAAM,iBAAiB;;AAEpC;AACA,MAAMC,MAAM,GAAG,IAAIN,SAAS,CAAC;EAC3B;EACAO,IAAI,EAAC,QAAQ;EACbC,MAAM,EAAE,CACN;IACEC,IAAI,EAAC,iBAAiB;IACtBC,IAAI,EAAC,QAAQ;IACbC,SAAS,EAACV,KAAK;IACfW,IAAI,EAAC;MAACC,KAAK,EAAC,IAAI;MAACC,MAAM,EAAC;IAAI;EAC9B,CAAC,EACD;IACEJ,IAAI,EAAC,OAAO;IACZC,SAAS,EAACT,IAAI;IACdU,IAAI,EAAC;MAACC,KAAK,EAAC;IAAI,CAAC;IACjBE,QAAQ,EAAE,CACR;MACEN,IAAI,EAAC,QAAQ;MACbC,IAAI,EAAC,MAAM;MACXC,SAAS,EAACR,IAAI;MACdS,IAAI,EAAC;QAACE,MAAM,EAAC,IAAI;QAACD,KAAK,EAAC;MAAI;MAC5B;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACF,CAAC,EACD;MACEJ,IAAI,EAAC,QAAQ;MACbC,IAAI,EAAC,SAAS;MACdC,SAAS,EAACP,OAAO;MACjBQ,IAAI,EAAC;QAACE,MAAM,EAAC,IAAI;QAACD,KAAK,EAAC;MAAI,CAAC;MAC7BE,QAAQ,EAAC,CACP;QACEN,IAAI,EAAC,kBAAkB;QACvBC,IAAI,EAAC,QAAQ;QACbC,SAAS,EAACN,MAAM;QAChBO,IAAI,EAAC;UAACC,KAAK,EAAC;QAAI,CAAC;QACjB;QACA;;QAEA;QACA;;QAEA;QACAG,KAAK,CAACC,MAAM,EAAC;UACX,OAAO;YACLC,EAAE,EAACD,MAAM,CAACE,KAAK,CAACD,EAAE;YAClBL,KAAK,EAACI,MAAM,CAACE,KAAK,CAACN;UAAK,CAAC;QAC7B;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACF,CAAC;IAEL,CAAC;EAEL,CAAC;AAEL,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACF;;AAEA,eAAeP,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}